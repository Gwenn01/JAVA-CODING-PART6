class Linked{
	Node head;
	int size;	
	public Linked(){
		this.size = 0;
	}
	boolean isEmpty(){
		return size == 0;
	}
	// add last
	void addLast(int val){
		Node node = new Node(val);
		if(isEmpty()){
			head = node;
		}else{
			Node temp = head;
			while(temp.next != null){
				temp = temp.next;
			}
			temp.next = node;
		}
		size++;
	}
	// SWAPPING NODES VALUE IN A LINKED LIST
	Node swapNodes(Node head, int k){
		if(head == null || head.next == null){
			return head;
		}
		// holding the swap
		int hold;
		
		Node last = null;
		// count the length
		Node temp = head;
		int length = 0;
		while(temp != null){
			last = temp;
			length++;
			temp = temp.next;
		}
		// swat start and last 
		if(k == 1 || length == k){
		  Node first = head;
		  hold = first.val;
		  first.val = last.val;
		  last.val = hold;
		  
		  return head;
		}
		// store how many iterate
		int rotationS = k-1;
		int rotationE = length - k;
		
		Node start = head;
		Node end = head;
		
	    // reach each position
		for(int i = 0; i < rotationS; i++){
			start = start.next;
		}
		for(int i = 0; i < rotationE; i++){
			end = end.next;
		}
	    
	    // swap
	    hold = start.val;
	    start.val = end.val;
	    end.val = hold;
	    	
		return head;	
	}
	//
	// display ans
	int k = 3;
	void displayAns(){
		Node temp = swapNodes(this.head, k);
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.println(" End");
		System.out.println();
	}
	// display
	void display(){
		Node temp = head;
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.println(" End");
		System.out.println();
	}
	private class Node{
		int val;
		Node next;
		public Node(int val){
			this.val = val;
		}
		public Node(int val, Node next){
			this.val = val;
			this.next = next;
		}
	}
}
public class Main {
	public static void main(String[] args) {
		Linked list = new Linked();
		list.addLast(1);
		list.addLast(2);
		list.addLast(3);
		list.addLast(4);
		list.addLast(5);
		list.addLast(6);
		list.addLast(7);
		list.addLast(8);
		list.addLast(9);
		list.addLast(10);
		list.display();
		System.out.println("SWAP NODES");
		System.out.println("K = " + list.k);
		list.displayAns();
	}
}