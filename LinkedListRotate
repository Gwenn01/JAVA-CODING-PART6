class Linked{
	Node head;
	int size;	
	public Linked(){
		this.size = 0;
	}
	boolean isEmpty(){
		return size == 0;
	}
	// add last
	void addLast(int val){
		Node node = new Node(val);
		if(isEmpty()){
			head = node;
		}else{
			Node temp = head;
			while(temp.next != null){
				temp = temp.next;
			}
			temp.next = node;
		}
		size++;
	}
	// ROTET LINKED LIST //
	Node reverse(Node head, int k){
	      if(k < 1 || head == null || head.next == null){
	      return head;	
	      }
	   // skip the repeated rotation
	    int length = 0;
	    Node temp = head;
	    while(temp != null){
	         temp = temp.next;
	         length++;
	    }
	    int rotation = k % length;
	 
	   // iterate till k
       for(int i = 0; i < rotation; i++){
       	Node current = head;
       // store first node to connect the head
       	Node first = head;
       	Node newLast = null;
       	while(current.next != null){
       		newLast = current;
       		current = current.next;
       	}
           head = current;
           head.next = first;
           // null the new last to stop avoid infinite loop
           newLast.next = null;
       }
       
       return head;
	}	

	// DISPLAY ANS
	int k = 14;
	void displayAns(){
		Node temp = reverse(this.head, k);
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.print(" End");
	}
	// display
	void display(){
		Node temp = head;
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.print(" End");
	}
	private class Node{
		int val;
		Node next;
		public Node(){
		}
		public Node(int val){
			this.val = val;
		}
		public Node(int val, Node next){
			this.val = val;
			this.next = next;
		}
	}
}
public class Main {
	public static void main(String[] args) {
		Linked list = new Linked();
		list.addLast(1); 
	    list.addLast(2);
	    list.addLast(3);
	    list.addLast(4);
	    list.addLast(5);
		list.addLast(6);
		list.display();
		System.out.println();
		System.out.println();
		System.out.println("ROTATE: ");
		System.out.println("K = " + list.k);
		System.out.println();
		list.displayAns();
	}
}