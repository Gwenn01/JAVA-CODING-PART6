import java.util.Stack;
// push O(1)
// pop O(n);
// peek O(n);
class MyQueue{
	Stack<Integer> stack1 = new Stack<>();
	Stack<Integer> stack2 = new Stack<>();
	public MyQueue(){	
	}
	public void push(int x){
		stack1.push(x);
	}
	public int pop(){
		while(!stack1.isEmpty()){
			stack2.push(stack1.pop());
		}
		int data = stack2.pop();
		while(!stack2.isEmpty()){
			stack1.push(stack2.pop());
		}
		return data;
	}
	public int peek(){
		while(!stack1.isEmpty()){
			stack2.push(stack1.pop());
		}
		int data = stack2.pop();
		stack1.push(data);
		while(!stack2.isEmpty()){
			stack1.push(stack2.pop());
		}
		return data;
	}
	public boolean empty(){
		return stack1.isEmpty();
	}
}
// push O(n)
// pop O(1)
// peek O(1)
class MyQueuee{
	Stack<Integer> stack1 = new Stack<>();
	Stack<Integer> stack2 = new Stack<>();
	public MyQueuee(){	
	}
	public void push(int x){
		while(!stack1.isEmpty()){
			stack2.push(stack1.pop());
		}
		stack1.push(x);
		while(!stack2.isEmpty()){
			stack1.push(stack2.pop());
		}
	}
	public int pop(){
		int data = stack1.pop();
		return data;
	}
	public int peek(){
		int data = stack1.peek(); 
		return 1;
	}
	public boolean empty(){
		return stack1.isEmpty();
	}
	
}
public class Main {
	public static void main(String[] args) {
		MyQueuee que = new MyQueuee();
		que.push(1);
		que.push(2);
		que.push(3);
		que.push(4);
		que.push(5);
		System.out.println(que.peek());
		System.out.println(que.pop());
		System.out.println(que.pop());
		
	}
}