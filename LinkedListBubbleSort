class Linked{
	Node head;
	int size;	
	public Linked(){
		this.size = 0;
	}
	boolean isEmpty(){
		return size == 0;
	}
	// add last
	void addLast(int val){
		Node node = new Node(val);
		if(isEmpty()){
			head = node;
		}else{
			Node temp = head;
			while(temp.next != null){
				temp = temp.next;
			}
			temp.next = node;
		}
		size++;
	}
	// BUBBLE SORT LIKNEDLIST //
	void bubbleSort(){
		int length = count();
		
		for(int i = 0; i < length - 1; i++){
			   Node temp = head;
			for(int j = 0; j < length- i - 1; j++){
				if(temp.val > temp.next.val){
					int hold = temp.val;
					temp.val = temp.next.val;
					temp.next.val = hold;
				}
				temp = temp.next;
			}
		}
	}
	// COUNT THE LINKED LIST //
	int count(){
		Node temp = head;
		int length = 0;
		while(temp != null){
			length++;
			temp = temp.next;
		}
		return length;
	}
	//
	// display
	void display(){
		Node temp = head;
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.print(" End");
	}
	private class Node{
		int val;
		Node next;
		public Node(int val){
			this.val = val;
		}
		public Node(int val, Node next){
			this.val = val;
			this.next = next;
		}
	}
}
public class Main {
	public static void main(String[] args) {
		Linked list = new Linked();
		list.addLast(7); 
	    list.addLast(1);
	    list.addLast(5);
	    list.addLast(4);
	    list.addLast(3);
		list.addLast(6);
		list.display();
		System.out.println();
		System.out.println();
		System.out.println("BUBBLE SORT: ");
		list.bubbleSort();
		list.display();
		
	}
}