class Linked{
	Node head;
	int size;	
	public Linked(){
		this.size = 0;
	}
	boolean isEmpty(){
		return size == 0;
	}
	// add last
	void addLast(int val){
		Node node = new Node(val);
		if(isEmpty()){
			head = node;
		}else{
			Node temp = head;
			while(temp.next != null){
				temp = temp.next;
			}
			temp.next = node;
		}
		size++;
	}
	// REVERSE NODES IN K-GROUP //
	Node reverse(Node head, int k){
       if(head == null || head.next == null || k == 1){
       	return head;
       }
       Node current = head;
       Node prev = null;
       Node checkLast = head;
       // check for alternate
       int j = 1;
       
      while(true){
       	Node last = prev;
       	Node newEnd = current;    
       			
       	// check if we are in last or < k
       	boolean isLast = true;
       	for(int i = 1; i <= k && checkLast != null; i++){
       		checkLast = checkLast.next;
       		if(k == i){
       			isLast = false;
       		}
       	}      	
      // if we are in the last dont reverse it
      	 
        if(isLast == false) {	
        // check alternate
            if(j % 2 == 1){
            	// reverse
	       	Node Next = current.next;
	       	for(int i = 1; current != null && i <= k; i++){
	       		current.next = prev;
	       		prev = current;
	       		current = Next;
	       		if(Next != null){
	       		    Next = Next.next;	
	       		}
	       	}
	       	
	       	if(last == null){
	       		head = prev;
	       	}else{
	       		last.next = prev;
	       	}
	       	
	       	newEnd.next = current;    	
	       	prev = newEnd; 
            }else{
        //dont reverse it just keep moving  
                last.next = current;
         	   for(int i = 1; current != null && i <= k; i++){
         	   prev = current;
         	   current = current.next;
             }
          }
	
        }
        // end the loops
       	if(checkLast== null){
       		break;
       	}
       	j++;
       } 
       return head;
      
}			
	// DISPLAY ANS
	int k = 3;
	void displayAns(){
		Node temp = reverse(head, k);
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.print(" End");
	}
	// display
	void display(){
		Node temp = head;
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.print(" End");
	}
	private class Node{
		int val;
		Node next;
		public Node(){
		}
		public Node(int val){
			this.val = val;
		}
		public Node(int val, Node next){
			this.val = val;
			this.next = next;
		}
	}
}
public class Main {
	public static void main(String[] args) {
		Linked list = new Linked();
		list.addLast(1); 
	    list.addLast(2);
	    list.addLast(3);
	    list.addLast(4);
	    list.addLast(5);
		list.addLast(6);
		list.addLast(7);
		list.addLast(8);
	    list.addLast(9);
		list.addLast(10);
		list.addLast(11);
       
		list.display();
		System.out.println();
		System.out.println();
		System.out.println("REVERSE NODES IN K - GROUP ALTERNATE");
		System.out.println();
		System.out.println("K = " + list.k);
		list.displayAns();
	}
}