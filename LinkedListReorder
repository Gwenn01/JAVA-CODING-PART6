class Linked{
	Node head;
	int size;	
	public Linked(){
		this.size = 0;
	}
	boolean isEmpty(){
		return size == 0;
	}
	// add last
	void addLast(int val){
		Node node = new Node(val);
		if(isEmpty()){
			head = node;
		}else{
			Node temp = head;
			while(temp.next != null){
				temp = temp.next;
			}
			temp.next = node;
		}
		size++;
	}
	// ROTATE LINKED LIST //
	Node rotate(){
		if(head == null || head.next == null){
	    	return head;			
		}
		Node start = head.next;		
        Node mid = getMid(head);
		Node end = reverse(mid);
		
	    // checking if we add start and end //
	    Node temp = head;
	    int i = 2;
	    // because it already point to head
	   while(start != mid || end != mid){
	     if(i % 2 == 0){
	        temp.next = end;
	        end = end.next;
	     }else{
	        temp.next = start;
	        start = start.next;
	     }
	     temp = temp.next;
	      i++;
	   }  	   
	   return head;
	}
	// REVERSE //
	Node reverse(Node mid){
		Node temp = mid;		
		Node current = temp;
		Node prev = null;
		Node Next = temp.next;
		while(current != null){
			current.next = prev;
			prev = current;
			current = Next;
			if(Next != null){
				Next = Next.next;
			}
		}
		return prev;
	}
	// GET MID //
	Node getMid(Node head){
		Node slow = head; 
		Node fast = head;
		while(fast != null && fast.next != null){
		    slow = slow.next;
		    fast = fast.next.next;	
		}
		return slow;
	}
	// DISPLAY ANS
	void displayAns(){
	Node temp = rotate();	
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.print(" End");
	}

	// display
	void display(){
		Node temp = head;
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.print(" End");
	}
	private class Node{
		int val;
		Node next;
		public Node(){
		}
		public Node(int val){
			this.val = val;
		}
		public Node(int val, Node next){
			this.val = val;
			this.next = next;
		}
	}
}
public class Main {
	public static void main(String[] args) {
		Linked list = new Linked();
		list.addLast(1); 
	    list.addLast(2);
	    list.addLast(3);
	    list.addLast(4);
	    list.addLast(5);
    	list.addLast(6);
		list.addLast(7); 
		list.display();
		System.out.println();
		System.out.println("ROTATE LINKED LIST: ");
		list.displayAns();
	}
}