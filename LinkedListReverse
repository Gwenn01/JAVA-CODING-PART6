class Linked{
	Node head;
	int size;	
	public Linked(){
		this.size = 0;
	}
	boolean isEmpty(){
		return size == 0;
	}
	// add last
	void addLast(int val){
		Node node = new Node(val);
		if(isEmpty()){
			head = node;
		}else{
			Node temp = head;
			while(temp.next != null){
				temp = temp.next;
			}
			temp.next = node;
		}
		size++;
	}
	// REVERSE LINKED LIST
	Node reverse(){
       if(head == null || head.next == null){
       	return head;
       }
       Node temp = head;
       Node prev = null;
       Node tempNext;
       // temp to connect the nodes
       // prev to reach the nodes last
       // tempnext so that we can store the current or temp next because current.next store prev
       while(temp != null){
       	tempNext = temp.next;
       	temp.next = prev;
       	prev = temp;
       	temp = tempNext;
       }
       head = prev;
       return head;
	}	
	//OTHER FORMULA 
	Node reversee(){
		if(head == null || head.next == null){
			return head;
		}
		Node temp = head;
		Node prev = null;
		Node Next = head.next;
		
		while(temp != null){
			temp.next = prev;
			prev = temp;
			temp = Next;
			if(Next != null){
				Next = Next.next;
			}
		}
		head = prev;
		return head;
	}
	// DISPLAY ANS
	void displayAns(){
		Node temp = reversee();
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.print(" End");
	}
	// display
	void display(){
		Node temp = head;
		if(temp == null){
			return;
		}
		System.out.println("Head: " + head.val);
		while(temp.next != null){
			System.out.print(temp.val + " -> ");
			temp = temp.next;
		}
		System.out.print(temp.val);
		System.out.print(" End");
	}
	private class Node{
		int val;
		Node next;
		public Node(){
		}
		public Node(int val){
			this.val = val;
		}
		public Node(int val, Node next){
			this.val = val;
			this.next = next;
		}
	}
}
public class Main {
	public static void main(String[] args) {
		Linked list = new Linked();
		list.addLast(1); 
	    list.addLast(2);
	    list.addLast(3);
	    list.addLast(4);
	    list.addLast(5);
		list.addLast(6);
		list.display();
		System.out.println();
		System.out.println("REVERSE");
		list.displayAns();
	}
}